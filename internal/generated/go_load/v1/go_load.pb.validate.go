// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: go_load/v1/go_load.proto

package go_loadv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AccountName

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}

	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on DownloadTask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DownloadTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadTask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DownloadTaskMultiError, or
// nil if none found.
func (m *DownloadTask) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetOfAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DownloadTaskValidationError{
					field:  "OfAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DownloadTaskValidationError{
					field:  "OfAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOfAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DownloadTaskValidationError{
				field:  "OfAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DownloadType

	// no validation rules for Url

	// no validation rules for DownloadStatus

	if len(errors) > 0 {
		return DownloadTaskMultiError(errors)
	}

	return nil
}

// DownloadTaskMultiError is an error wrapping multiple validation errors
// returned by DownloadTask.ValidateAll() if the designated constraints aren't met.
type DownloadTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadTaskMultiError) AllErrors() []error { return m }

// DownloadTaskValidationError is the validation error returned by
// DownloadTask.Validate if the designated constraints aren't met.
type DownloadTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadTaskValidationError) ErrorName() string { return "DownloadTaskValidationError" }

// Error satisfies the builtin error interface
func (e DownloadTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadTaskValidationError{}

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountName

	// no validation rules for Password

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

// Validate checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountResponseMultiError, or nil if none found.
func (m *CreateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return CreateAccountResponseMultiError(errors)
	}

	return nil
}

// CreateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountResponseMultiError) AllErrors() []error { return m }

// CreateAccountResponseValidationError is the validation error returned by
// CreateAccountResponse.Validate if the designated constraints aren't met.
type CreateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountResponseValidationError) ErrorName() string {
	return "CreateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountResponseValidationError{}

// Validate checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionRequestMultiError, or nil if none found.
func (m *CreateSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountName

	// no validation rules for Password

	if len(errors) > 0 {
		return CreateSessionRequestMultiError(errors)
	}

	return nil
}

// CreateSessionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionRequestMultiError) AllErrors() []error { return m }

// CreateSessionRequestValidationError is the validation error returned by
// CreateSessionRequest.Validate if the designated constraints aren't met.
type CreateSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionRequestValidationError) ErrorName() string {
	return "CreateSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionRequestValidationError{}

// Validate checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionResponseMultiError, or nil if none found.
func (m *CreateSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSessionResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSessionResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSessionResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSessionResponseMultiError(errors)
	}

	return nil
}

// CreateSessionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionResponseMultiError) AllErrors() []error { return m }

// CreateSessionResponseValidationError is the validation error returned by
// CreateSessionResponse.Validate if the designated constraints aren't met.
type CreateSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionResponseValidationError) ErrorName() string {
	return "CreateSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionResponseValidationError{}

// Validate checks the field values on CreateDownloadTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDownloadTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDownloadTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDownloadTaskRequestMultiError, or nil if none found.
func (m *CreateDownloadTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDownloadTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadType

	// no validation rules for Url

	if len(errors) > 0 {
		return CreateDownloadTaskRequestMultiError(errors)
	}

	return nil
}

// CreateDownloadTaskRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDownloadTaskRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateDownloadTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDownloadTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDownloadTaskRequestMultiError) AllErrors() []error { return m }

// CreateDownloadTaskRequestValidationError is the validation error returned by
// CreateDownloadTaskRequest.Validate if the designated constraints aren't met.
type CreateDownloadTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDownloadTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDownloadTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDownloadTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDownloadTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDownloadTaskRequestValidationError) ErrorName() string {
	return "CreateDownloadTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDownloadTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDownloadTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDownloadTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDownloadTaskRequestValidationError{}

// Validate checks the field values on CreateDownloadTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDownloadTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDownloadTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDownloadTaskResponseMultiError, or nil if none found.
func (m *CreateDownloadTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDownloadTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDownloadTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDownloadTaskResponseValidationError{
					field:  "DownloadTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDownloadTaskResponseValidationError{
					field:  "DownloadTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDownloadTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDownloadTaskResponseValidationError{
				field:  "DownloadTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDownloadTaskResponseMultiError(errors)
	}

	return nil
}

// CreateDownloadTaskResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDownloadTaskResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateDownloadTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDownloadTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDownloadTaskResponseMultiError) AllErrors() []error { return m }

// CreateDownloadTaskResponseValidationError is the validation error returned
// by CreateDownloadTaskResponse.Validate if the designated constraints aren't met.
type CreateDownloadTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDownloadTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDownloadTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDownloadTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDownloadTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDownloadTaskResponseValidationError) ErrorName() string {
	return "CreateDownloadTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDownloadTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDownloadTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDownloadTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDownloadTaskResponseValidationError{}

// Validate checks the field values on GetDownloadTaskListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDownloadTaskListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDownloadTaskListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDownloadTaskListRequestMultiError, or nil if none found.
func (m *GetDownloadTaskListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDownloadTaskListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetDownloadTaskListRequestMultiError(errors)
	}

	return nil
}

// GetDownloadTaskListRequestMultiError is an error wrapping multiple
// validation errors returned by GetDownloadTaskListRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDownloadTaskListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDownloadTaskListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDownloadTaskListRequestMultiError) AllErrors() []error { return m }

// GetDownloadTaskListRequestValidationError is the validation error returned
// by GetDownloadTaskListRequest.Validate if the designated constraints aren't met.
type GetDownloadTaskListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDownloadTaskListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDownloadTaskListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDownloadTaskListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDownloadTaskListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDownloadTaskListRequestValidationError) ErrorName() string {
	return "GetDownloadTaskListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDownloadTaskListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDownloadTaskListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDownloadTaskListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDownloadTaskListRequestValidationError{}

// Validate checks the field values on GetDownloadTaskListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDownloadTaskListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDownloadTaskListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDownloadTaskListResponseMultiError, or nil if none found.
func (m *GetDownloadTaskListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDownloadTaskListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDownloadTaskList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDownloadTaskListResponseValidationError{
						field:  fmt.Sprintf("DownloadTaskList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDownloadTaskListResponseValidationError{
						field:  fmt.Sprintf("DownloadTaskList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDownloadTaskListResponseValidationError{
					field:  fmt.Sprintf("DownloadTaskList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalDownloadTaskCount

	if len(errors) > 0 {
		return GetDownloadTaskListResponseMultiError(errors)
	}

	return nil
}

// GetDownloadTaskListResponseMultiError is an error wrapping multiple
// validation errors returned by GetDownloadTaskListResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDownloadTaskListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDownloadTaskListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDownloadTaskListResponseMultiError) AllErrors() []error { return m }

// GetDownloadTaskListResponseValidationError is the validation error returned
// by GetDownloadTaskListResponse.Validate if the designated constraints
// aren't met.
type GetDownloadTaskListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDownloadTaskListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDownloadTaskListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDownloadTaskListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDownloadTaskListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDownloadTaskListResponseValidationError) ErrorName() string {
	return "GetDownloadTaskListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDownloadTaskListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDownloadTaskListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDownloadTaskListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDownloadTaskListResponseValidationError{}

// Validate checks the field values on UpdateDownloadTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDownloadTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDownloadTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDownloadTaskRequestMultiError, or nil if none found.
func (m *UpdateDownloadTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDownloadTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadTaskId

	// no validation rules for Url

	if len(errors) > 0 {
		return UpdateDownloadTaskRequestMultiError(errors)
	}

	return nil
}

// UpdateDownloadTaskRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDownloadTaskRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateDownloadTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDownloadTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDownloadTaskRequestMultiError) AllErrors() []error { return m }

// UpdateDownloadTaskRequestValidationError is the validation error returned by
// UpdateDownloadTaskRequest.Validate if the designated constraints aren't met.
type UpdateDownloadTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDownloadTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDownloadTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDownloadTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDownloadTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDownloadTaskRequestValidationError) ErrorName() string {
	return "UpdateDownloadTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDownloadTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDownloadTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDownloadTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDownloadTaskRequestValidationError{}

// Validate checks the field values on UpdateDownloadTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDownloadTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDownloadTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDownloadTaskResponseMultiError, or nil if none found.
func (m *UpdateDownloadTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDownloadTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDownloadTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDownloadTaskResponseValidationError{
					field:  "DownloadTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDownloadTaskResponseValidationError{
					field:  "DownloadTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDownloadTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDownloadTaskResponseValidationError{
				field:  "DownloadTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDownloadTaskResponseMultiError(errors)
	}

	return nil
}

// UpdateDownloadTaskResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDownloadTaskResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateDownloadTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDownloadTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDownloadTaskResponseMultiError) AllErrors() []error { return m }

// UpdateDownloadTaskResponseValidationError is the validation error returned
// by UpdateDownloadTaskResponse.Validate if the designated constraints aren't met.
type UpdateDownloadTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDownloadTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDownloadTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDownloadTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDownloadTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDownloadTaskResponseValidationError) ErrorName() string {
	return "UpdateDownloadTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDownloadTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDownloadTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDownloadTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDownloadTaskResponseValidationError{}

// Validate checks the field values on DeleteDownloadTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDownloadTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDownloadTaskRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDownloadTaskRequestMultiError, or nil if none found.
func (m *DeleteDownloadTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDownloadTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadTaskId

	if len(errors) > 0 {
		return DeleteDownloadTaskRequestMultiError(errors)
	}

	return nil
}

// DeleteDownloadTaskRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDownloadTaskRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteDownloadTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDownloadTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDownloadTaskRequestMultiError) AllErrors() []error { return m }

// DeleteDownloadTaskRequestValidationError is the validation error returned by
// DeleteDownloadTaskRequest.Validate if the designated constraints aren't met.
type DeleteDownloadTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDownloadTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDownloadTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDownloadTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDownloadTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDownloadTaskRequestValidationError) ErrorName() string {
	return "DeleteDownloadTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDownloadTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDownloadTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDownloadTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDownloadTaskRequestValidationError{}

// Validate checks the field values on DeleteDownloadTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDownloadTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDownloadTaskResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDownloadTaskResponseMultiError, or nil if none found.
func (m *DeleteDownloadTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDownloadTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDownloadTaskResponseMultiError(errors)
	}

	return nil
}

// DeleteDownloadTaskResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteDownloadTaskResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteDownloadTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDownloadTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDownloadTaskResponseMultiError) AllErrors() []error { return m }

// DeleteDownloadTaskResponseValidationError is the validation error returned
// by DeleteDownloadTaskResponse.Validate if the designated constraints aren't met.
type DeleteDownloadTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDownloadTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDownloadTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDownloadTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDownloadTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDownloadTaskResponseValidationError) ErrorName() string {
	return "DeleteDownloadTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDownloadTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDownloadTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDownloadTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDownloadTaskResponseValidationError{}

// Validate checks the field values on GetDownloadTaskFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDownloadTaskFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDownloadTaskFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDownloadTaskFileRequestMultiError, or nil if none found.
func (m *GetDownloadTaskFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDownloadTaskFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DownloadTaskId

	if len(errors) > 0 {
		return GetDownloadTaskFileRequestMultiError(errors)
	}

	return nil
}

// GetDownloadTaskFileRequestMultiError is an error wrapping multiple
// validation errors returned by GetDownloadTaskFileRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDownloadTaskFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDownloadTaskFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDownloadTaskFileRequestMultiError) AllErrors() []error { return m }

// GetDownloadTaskFileRequestValidationError is the validation error returned
// by GetDownloadTaskFileRequest.Validate if the designated constraints aren't met.
type GetDownloadTaskFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDownloadTaskFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDownloadTaskFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDownloadTaskFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDownloadTaskFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDownloadTaskFileRequestValidationError) ErrorName() string {
	return "GetDownloadTaskFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDownloadTaskFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDownloadTaskFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDownloadTaskFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDownloadTaskFileRequestValidationError{}

// Validate checks the field values on GetDownloadTaskFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDownloadTaskFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDownloadTaskFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDownloadTaskFileResponseMultiError, or nil if none found.
func (m *GetDownloadTaskFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDownloadTaskFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return GetDownloadTaskFileResponseMultiError(errors)
	}

	return nil
}

// GetDownloadTaskFileResponseMultiError is an error wrapping multiple
// validation errors returned by GetDownloadTaskFileResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDownloadTaskFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDownloadTaskFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDownloadTaskFileResponseMultiError) AllErrors() []error { return m }

// GetDownloadTaskFileResponseValidationError is the validation error returned
// by GetDownloadTaskFileResponse.Validate if the designated constraints
// aren't met.
type GetDownloadTaskFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDownloadTaskFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDownloadTaskFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDownloadTaskFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDownloadTaskFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDownloadTaskFileResponseValidationError) ErrorName() string {
	return "GetDownloadTaskFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDownloadTaskFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDownloadTaskFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDownloadTaskFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDownloadTaskFileResponseValidationError{}
